{"version":3,"sources":["components/Block.js","components/Board.js","components/QuickSet.js","components/RandomSet.js","assets/loading-gif.gif","components/LoadingScreen.js","algorithms/IDS.js","algorithms/AStar.js","algorithms/GreedyBFS.js","components/Result.js","components/Solver.js","App.js","reportWebVitals.js","index.js"],"names":["Block","number","className","Board","blocks","setBlocks","moveAbles","setMoveAbles","move","block","blockPosition","emptyPosition","blockIdx","emptyIdx","includes","indexOf","newBlocks","JSON","parse","stringify","map","onClick","e","QuickSet","setSetterMode","useState","isChoosing","setIsChoosing","selectedBlock","setSelectedBlock","tmpBlocks","setTmpBlocks","availableNumbers","setAvailableNumbers","reset","length","i","j","alert","idx","newAvailableNumbers","splice","rowToFree","push","newTmpBlocks","fixBlock","RandomSet","componentMove","componentBlocks","componentMoveAbles","newMoveAbles","changeCount","Math","floor","random","prev","next","fire","LoadingScreen","src","loadingGif","alt","getNumberPosition","state","availableMoves","goalTest","nodeGenerator","node","numberPosition","numberIdx","newState","depth","limitedDepthFirstSearch","startingNode","limit","stack","answer","forEach","lastState","currentNode","pop","nextNode","IDS","console","log","ans","steps","lastDepths","foundOnDepth","reverse","blockManhattan","board","goalMapper","distance","abs","getNodeFValue","manhattanDistance","AStar","f","selectedNodeIndex","bestScore","currentScore","nodeReturned","indexReturned","getBestNodeInStack","parent","AStarRunner","cNode","GBFS","GreedyBFS","Result","result","execTime","algorithm","step","Solver","setResult","setExecTime","useEffect","timer","setTimeout","startDate","Date","res","timeTaken","getTime","clearTimeout","App","solved","setSolved","setterMode","isSolving","setIsSolving","setAlgorithm","getSetterModeButtonsClass","button","getSetterComponentByMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f3a1666.chunk.js","sourcesContent":["const Block = ({number}) => {\r\n    if (number === 0){\r\n        return(\r\n            <div></div>\r\n        );\r\n    } else {\r\n        return(\r\n            <div className={\"transition shadow-lg rounded-lg p-5 bg-blue-500 hover:bg-blue-800 hover:shadow-xl text-center text-white\"}>\r\n                {number}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Block","import Block from \"./Block\";\r\n\r\nconst Board = ({ blocks, setBlocks, moveAbles, setMoveAbles }) => {\r\n\r\n    const move = (block) => {\r\n        let blockPosition, emptyPosition, blockIdx, emptyIdx;\r\n\r\n        if (blocks[0].includes(block)){\r\n            blockPosition = 0\r\n            blockIdx = blocks[0].indexOf(block)\r\n        } else if (blocks[1].includes(block)){\r\n            blockPosition = 1\r\n            blockIdx = blocks[1].indexOf(block)\r\n        } else {\r\n            blockPosition = 2\r\n            blockIdx = blocks[2].indexOf(block)\r\n        }\r\n\r\n        if (blocks[0].includes(0)){\r\n            emptyPosition = 0\r\n            emptyIdx = blocks[0].indexOf(0)\r\n        } else if (blocks[1].includes(0)){\r\n            emptyPosition = 1\r\n            emptyIdx = blocks[1].indexOf(0)\r\n        } else {\r\n            emptyPosition = 2\r\n            emptyIdx = blocks[2].indexOf(0)\r\n        }\r\n\r\n        // update blocks\r\n        let newBlocks = JSON.parse(JSON.stringify(blocks))\r\n        newBlocks[blockPosition][blockIdx] = 0\r\n        newBlocks[emptyPosition][emptyIdx] = block\r\n        setBlocks(newBlocks)\r\n\r\n        // update moveAbles\r\n        if (blockPosition === 0 && blockIdx === 0){\r\n            setMoveAbles([\r\n                newBlocks[0][1],\r\n                newBlocks[1][0]\r\n            ])\r\n        } else if (blockPosition === 0 && blockIdx === 1){\r\n            setMoveAbles([\r\n                newBlocks[0][0],\r\n                newBlocks[0][2],\r\n                newBlocks[1][1]\r\n            ])\r\n        } else if (blockPosition === 0 && blockIdx === 2){\r\n            setMoveAbles([\r\n                newBlocks[0][1],\r\n                newBlocks[1][2]\r\n            ])\r\n        } else if (blockPosition === 1 && blockIdx === 0){\r\n            setMoveAbles([\r\n                newBlocks[0][0],\r\n                newBlocks[1][1],\r\n                newBlocks[2][0],\r\n            ])\r\n        } else if (blockPosition === 1 && blockIdx === 1){\r\n            setMoveAbles([\r\n                newBlocks[0][1],\r\n                newBlocks[1][0],\r\n                newBlocks[1][2],\r\n                newBlocks[2][1],\r\n            ])\r\n        } else if (blockPosition === 1 && blockIdx === 2){\r\n            setMoveAbles([\r\n                newBlocks[0][2],\r\n                newBlocks[1][1],\r\n                newBlocks[2][2],\r\n            ])\r\n        } else if (blockPosition === 2 && blockIdx === 0){\r\n            setMoveAbles([\r\n                newBlocks[1][0],\r\n                newBlocks[2][1]\r\n            ])\r\n        } else if (blockPosition === 2 && blockIdx === 1){\r\n            setMoveAbles([\r\n                newBlocks[2][0],\r\n                newBlocks[1][1],\r\n                newBlocks[2][2],\r\n            ])\r\n        } else{\r\n            setMoveAbles([\r\n                newBlocks[1][2],\r\n                newBlocks[2][1]\r\n            ])\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={\"m-3 w-max bg-gray-200 p-5 grid grid-cols-3 gap-2 rounded-lg border-2 border-gray-400\"}>\r\n            {\r\n                blocks[0].map(block => {\r\n                    if (moveAbles.includes(block)){\r\n                        return(\r\n                            <div key={block} onClick={e => move(block)} className={\"cursor-pointer\"}>\r\n                                <Block number={block}/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return(\r\n                        <div key={block} className={'cursor-not-allowed'}>\r\n                            <Block number={block}/>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                blocks[1].map(block => {\r\n                    if (moveAbles.includes(block)){\r\n                        return(\r\n                            <div key={block} onClick={e => move(block)} className={\"cursor-pointer\"}>\r\n                                <Block number={block}/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return(\r\n                        <div key={block} className={'cursor-not-allowed'}>\r\n                            <Block number={block}/>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                blocks[2].map(block => {\r\n                    if (moveAbles.includes(block)){\r\n                        return(\r\n                            <div key={block} onClick={e => move(block)} className={\"cursor-pointer\"}>\r\n                                <Block number={block}/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return(\r\n                        <div key={block} className={'cursor-not-allowed'}>\r\n                            <Block number={block}/>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board","import {useState} from \"react\";\r\n\r\nconst QuickSet = ({ setBlocks, setMoveAbles, setSetterMode }) => {\r\n    const [isChoosing, setIsChoosing] = useState(false)\r\n    const [selectedBlock, setSelectedBlock] = useState(null)\r\n    const [tmpBlocks, setTmpBlocks] = useState([\r\n        [-1, -1, -1],\r\n        [-1, -1, -1],\r\n        [-1, -1, -1]\r\n    ])\r\n    const [availableNumbers, setAvailableNumbers] = useState([\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8\r\n    ])\r\n\r\n    const fixBlock = (number) => {\r\n        if(tmpBlocks[selectedBlock[0]][selectedBlock[1]] === -1){\r\n            let newAvailableNumbers = JSON.parse(JSON.stringify(availableNumbers))\r\n            newAvailableNumbers.splice(newAvailableNumbers.indexOf(number), 1)\r\n            setAvailableNumbers(newAvailableNumbers)\r\n        } else {\r\n            let rowToFree = tmpBlocks[selectedBlock[0]][selectedBlock[1]]\r\n            let newAvailableNumbers = JSON.parse(JSON.stringify(availableNumbers))\r\n            newAvailableNumbers.splice(newAvailableNumbers.indexOf(number), 1)\r\n            newAvailableNumbers.push(rowToFree)\r\n            setAvailableNumbers(newAvailableNumbers)\r\n        }\r\n        let newTmpBlocks = JSON.parse(JSON.stringify(tmpBlocks))\r\n        newTmpBlocks[selectedBlock[0]][selectedBlock[1]] = number\r\n        setTmpBlocks(newTmpBlocks)\r\n\r\n        setIsChoosing(false)\r\n    }\r\n\r\n    const fire = () => {\r\n        for (let i=0; i<3; i++){\r\n            for (let j=0; j<3; j++){\r\n                if (tmpBlocks[i][j] === -1){\r\n                    alert(\"Please set all blocks!\")\r\n                    reset()\r\n                    return\r\n                }\r\n            }\r\n        }\r\n\r\n        setBlocks(tmpBlocks)\r\n        let emptyPosition;\r\n        let emptyIdx;\r\n\r\n        for (let i=0; i<3; i++){\r\n            for (let j=0; j<3; j++){\r\n                if (tmpBlocks[i][j] === 0){\r\n                    emptyPosition = i\r\n                    emptyIdx = j\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        // update moveAbles\r\n        if (emptyPosition === 0 && emptyIdx === 0){\r\n            setMoveAbles([\r\n                tmpBlocks[0][1],\r\n                tmpBlocks[1][0]\r\n            ])\r\n        } else if (emptyPosition === 0 && emptyIdx === 1){\r\n            setMoveAbles([\r\n                tmpBlocks[0][0],\r\n                tmpBlocks[0][2],\r\n                tmpBlocks[1][1]\r\n            ])\r\n        } else if (emptyPosition === 0 && emptyIdx === 2){\r\n            setMoveAbles([\r\n                tmpBlocks[0][1],\r\n                tmpBlocks[1][2]\r\n            ])\r\n        } else if (emptyPosition === 1 && emptyIdx === 0){\r\n            setMoveAbles([\r\n                tmpBlocks[0][0],\r\n                tmpBlocks[1][1],\r\n                tmpBlocks[2][0],\r\n            ])\r\n        } else if (emptyPosition === 1 && emptyIdx === 1){\r\n            setMoveAbles([\r\n                tmpBlocks[0][1],\r\n                tmpBlocks[1][0],\r\n                tmpBlocks[1][2],\r\n                tmpBlocks[2][1],\r\n            ])\r\n        } else if (emptyPosition === 1 && emptyIdx === 2){\r\n            setMoveAbles([\r\n                tmpBlocks[0][2],\r\n                tmpBlocks[1][1],\r\n                tmpBlocks[2][2],\r\n            ])\r\n        } else if (emptyPosition === 2 && emptyIdx === 0){\r\n            setMoveAbles([\r\n                tmpBlocks[1][0],\r\n                tmpBlocks[2][1]\r\n            ])\r\n        } else if (emptyPosition === 2 && emptyIdx === 1){\r\n            setMoveAbles([\r\n                tmpBlocks[2][0],\r\n                tmpBlocks[1][1],\r\n                tmpBlocks[2][2],\r\n            ])\r\n        } else{\r\n            setMoveAbles([\r\n                tmpBlocks[1][2],\r\n                tmpBlocks[2][1]\r\n            ])\r\n        }\r\n\r\n        reset()\r\n        setSetterMode(1)\r\n    }\r\n\r\n    const reset = () => {\r\n        setAvailableNumbers([\r\n            0, 1, 2, 3, 4, 5, 6, 7, 8\r\n        ])\r\n        setTmpBlocks([\r\n            [-1, -1, -1],\r\n            [-1, -1, -1],\r\n            [-1, -1, -1]\r\n        ])\r\n        setIsChoosing(false)\r\n        setSelectedBlock(null)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className={\"w-max mx-auto\"}>\r\n\r\n                {\r\n                    availableNumbers.length === 0 ?\r\n                        <div\r\n                            onClick={fire}\r\n                            className={\"text-center mb-3 text-xl bg-blue-500 text-white py-2 rounded-lg shadow-lg hover:bg-blue-800 hover:shadow-xl transition cursor-pointer\"}>\r\n                            Set\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n\r\n                {\r\n                    availableNumbers.length === 9 ?\r\n                        null\r\n                        :\r\n                        <div\r\n                            onClick={reset}\r\n                            className={\"text-center mb-3 text-xl bg-red-500 text-white py-2 rounded-lg shadow-lg hover:bg-red-800 hover:shadow-xl transition cursor-pointer\"}>\r\n                            Reset\r\n                        </div>\r\n                }\r\n\r\n                <div className={\"m-3 w-max bg-gray-200 p-5 grid grid-cols-3 gap-2 rounded-lg border-2 border-gray-400\"}>\r\n                    {\r\n                        tmpBlocks[0].map((block, idx) => {\r\n                            return(\r\n                                <div\r\n                                    key={`${0}-${idx}`}\r\n                                    onClick={e => {\r\n                                        setSelectedBlock([0, idx])\r\n                                        setIsChoosing(true)\r\n                                    }}\r\n                                    className={\"cursor-pointer transition shadow-lg rounded-lg p-5 bg-blue-500 hover:bg-blue-800 hover:shadow-xl text-center text-white\"}>\r\n                                    {\r\n                                        block === -1 ?\r\n                                            <span>X</span>\r\n                                            :\r\n                                            block\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                        tmpBlocks[1].map((block, idx) => {\r\n                            return(\r\n                                <div\r\n                                    key={`${1}-${idx}`}\r\n                                    onClick={e => {\r\n                                        setSelectedBlock([1, idx])\r\n                                        setIsChoosing(true)\r\n                                    }}\r\n                                    className={\"cursor-pointer transition shadow-lg rounded-lg p-5 bg-blue-500 hover:bg-blue-800 hover:shadow-xl text-center text-white\"}>\r\n                                    {\r\n                                        block === -1 ?\r\n                                            <span>X</span>\r\n                                            :\r\n                                            block\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                        tmpBlocks[2].map((block, idx) => {\r\n                            return(\r\n                                <div\r\n                                    key={`${2}-${idx}`}\r\n                                    onClick={e => {\r\n                                        setSelectedBlock([2, idx])\r\n                                        setIsChoosing(true)\r\n                                    }}\r\n                                    className={\"cursor-pointer transition shadow-lg rounded-lg p-5 bg-blue-500 hover:bg-blue-800 hover:shadow-xl text-center text-white\"}>\r\n                                    {\r\n                                        block === -1 ?\r\n                                            <span>X</span>\r\n                                            :\r\n                                            block\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n\r\n                {\r\n                    isChoosing ?\r\n                        <div className={\"grid grid-cols-3 gap-2\"}>\r\n                            {\r\n                                [0, 1, 2, 3, 4, 5, 6, 7, 8].map(number => {\r\n                                    if (availableNumbers.includes(number)) {\r\n                                        return (\r\n                                            <div\r\n                                                key={number}\r\n                                                onClick={e => {\r\n                                                    fixBlock(number)\r\n                                                }}\r\n                                                className={\"transition cursor-pointer text-center p-2 bg-blue-500 text-white rounded-lg shadow-lg hover:bg-blue-800 hover:shadow-xl\"}>\r\n                                                {number}\r\n                                            </div>\r\n                                        );\r\n                                    } else {\r\n                                        return(\r\n                                            <div\r\n                                                key={number}\r\n                                                className={\"transition cursor-not-allowed text-center p-2 bg-red-500 text-white rounded-lg shadow-lg hover:bg-red-800 hover:shadow-xl\"}>\r\n                                                {number}\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                })\r\n                            }\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n            </div>\r\n            <div className={\"text-center text-gray-700 mt-2\"}>\r\n                <div>Careful when using \"Quick set\", Half of the starting states are not going to be solved!</div>\r\n                <div>We recommended to use either \"Manual set\" or \"Random set\" to make sure the puzzle can be solved.</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuickSet","const RandomSet = ({ blocks, setBlocks, moveAbles, setMoveAbles, setSetterMode }) => {\r\n\r\n    const fire = () => {\r\n        // reset the current state to keep track of \"d\"\r\n        setBlocks([\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8]\r\n        ])\r\n        setMoveAbles([1, 3])\r\n\r\n        let changeCount = Math.floor(Math.random() * 5) + 3 // todo : limit\r\n        let componentBlocks = JSON.parse(JSON.stringify(blocks))\r\n        let componentMoveAbles = JSON.parse(JSON.stringify(moveAbles))\r\n        let prev = null;\r\n\r\n        for (let i=0; i<changeCount; i++){\r\n            let next = componentMoveAbles[Math.floor(Math.random() * componentMoveAbles.length)]\r\n            while (next === prev){\r\n                next = componentMoveAbles[Math.floor(Math.random() * componentMoveAbles.length)]\r\n            }\r\n            prev = next\r\n            let {newBlocks, newMoveAbles} = componentMove(next, componentBlocks, componentMoveAbles)\r\n            componentBlocks = JSON.parse(JSON.stringify(newBlocks))\r\n            componentMoveAbles = JSON.parse(JSON.stringify(newMoveAbles))\r\n        }\r\n        setBlocks(componentBlocks)\r\n        setMoveAbles(componentMoveAbles)\r\n        setSetterMode(1)\r\n    }\r\n\r\n    const componentMove = (block, componentBlocks, componentMoveAbles) => {\r\n        let blockPosition, emptyPosition, blockIdx, emptyIdx;\r\n\r\n        if (componentBlocks[0].includes(block)){\r\n            blockPosition = 0\r\n            blockIdx = componentBlocks[0].indexOf(block)\r\n        } else if (componentBlocks[1].includes(block)){\r\n            blockPosition = 1\r\n            blockIdx = componentBlocks[1].indexOf(block)\r\n        } else {\r\n            blockPosition = 2\r\n            blockIdx = componentBlocks[2].indexOf(block)\r\n        }\r\n\r\n        if (componentBlocks[0].includes(0)){\r\n            emptyPosition = 0\r\n            emptyIdx = componentBlocks[0].indexOf(0)\r\n        } else if (componentBlocks[1].includes(0)){\r\n            emptyPosition = 1\r\n            emptyIdx = componentBlocks[1].indexOf(0)\r\n        } else {\r\n            emptyPosition = 2\r\n            emptyIdx = componentBlocks[2].indexOf(0)\r\n        }\r\n\r\n        // update blocks\r\n        let newBlocks = JSON.parse(JSON.stringify(componentBlocks))\r\n        newBlocks[blockPosition][blockIdx] = 0\r\n        newBlocks[emptyPosition][emptyIdx] = block\r\n\r\n        // update moveAbles\r\n        let newMoveAbles;\r\n        if (blockPosition === 0 && blockIdx === 0){\r\n            newMoveAbles = [\r\n                newBlocks[0][1],\r\n                newBlocks[1][0]\r\n            ]\r\n        } else if (blockPosition === 0 && blockIdx === 1){\r\n            newMoveAbles = [\r\n                newBlocks[0][0],\r\n                newBlocks[0][2],\r\n                newBlocks[1][1]\r\n            ]\r\n        } else if (blockPosition === 0 && blockIdx === 2){\r\n            newMoveAbles = [\r\n                newBlocks[0][1],\r\n                newBlocks[1][2]\r\n            ]\r\n        } else if (blockPosition === 1 && blockIdx === 0){\r\n            newMoveAbles = [\r\n                newBlocks[0][0],\r\n                newBlocks[1][1],\r\n                newBlocks[2][0],\r\n            ]\r\n        } else if (blockPosition === 1 && blockIdx === 1){\r\n            newMoveAbles = [\r\n                newBlocks[0][1],\r\n                newBlocks[1][0],\r\n                newBlocks[1][2],\r\n                newBlocks[2][1],\r\n            ]\r\n        } else if (blockPosition === 1 && blockIdx === 2){\r\n            newMoveAbles = [\r\n                newBlocks[0][2],\r\n                newBlocks[1][1],\r\n                newBlocks[2][2],\r\n            ]\r\n        } else if (blockPosition === 2 && blockIdx === 0){\r\n            newMoveAbles = [\r\n                newBlocks[1][0],\r\n                newBlocks[2][1]\r\n            ]\r\n        } else if (blockPosition === 2 && blockIdx === 1){\r\n            newMoveAbles = [\r\n                newBlocks[2][0],\r\n                newBlocks[1][1],\r\n                newBlocks[2][2],\r\n            ]\r\n        } else{\r\n            newMoveAbles = [\r\n                newBlocks[1][2],\r\n                newBlocks[2][1]\r\n            ]\r\n        }\r\n\r\n        return {\r\n            newBlocks,\r\n            newMoveAbles\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                fire()\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomSet","export default __webpack_public_path__ + \"static/media/loading-gif.3bd80a05.gif\";","import loadingGif from '../assets/loading-gif.gif';\r\n\r\n\r\nconst LoadingScreen = () => {\r\n    return(\r\n        <div className={\"text-center p-5 w-max mx-auto\"}>\r\n            <img src={loadingGif} alt=\"loading...\" />\r\n            <div className={\"text-5xl text-gray-700\"}>\r\n                Processing...\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingScreen","function getNumberPosition(state, number) {\r\n    if (state[0].includes(number)){\r\n        return [0, state[0].indexOf(number)]\r\n    } else if (state[1].includes(number)){\r\n        return [1, state[1].indexOf(number)]\r\n    } else {\r\n        return [2, state[2].indexOf(number)]\r\n    }\r\n}\r\n\r\nfunction availableMoves(state) {\r\n    let moveAbles = []\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(state, 0)\r\n\r\n    if (emptyPosition === 0 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[0][2],\r\n            state[1][1]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][2]\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[1][1],\r\n            state[2][0],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0],\r\n            state[1][2],\r\n            state[2][1],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][2],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[1][0],\r\n            state[2][1]\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[2][0],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else{\r\n        moveAbles = [\r\n            state[1][2],\r\n            state[2][1]\r\n        ]\r\n    }\r\n\r\n    return moveAbles\r\n}\r\n\r\nfunction goalTest(state) {\r\n    return JSON.stringify(state) === JSON.stringify([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\r\n}\r\n\r\nfunction nodeGenerator(node, number) {\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(node.state, 0)\r\n    let [numberPosition, numberIdx] = getNumberPosition(node.state, number)\r\n\r\n    let newState = JSON.parse(JSON.stringify(node.state))\r\n    newState[numberPosition][numberIdx] = 0\r\n    newState[emptyPosition][emptyIdx] = number\r\n\r\n    return {\r\n        state: newState,\r\n        depth: node.depth + 1\r\n    }\r\n}\r\n\r\nfunction limitedDepthFirstSearch(startingNode, limit) {\r\n    let stack = []\r\n    let answer = []\r\n    if (goalTest(startingNode.state)) {\r\n        return answer\r\n    }\r\n    availableMoves(startingNode.state).forEach(move => {\r\n        stack.push(nodeGenerator(startingNode, move))\r\n    })\r\n    let lastState = startingNode.state\r\n    while (stack.length !== 0){\r\n        let currentNode = stack[stack.length - 1]\r\n        answer.push(currentNode)\r\n        if (goalTest(currentNode.state)) {\r\n            return answer\r\n        }\r\n        stack.pop()\r\n        if (currentNode.depth + 1 > limit) {\r\n            answer.pop()\r\n            continue\r\n        }\r\n        availableMoves(currentNode.state).forEach(move => {\r\n            let nextNode = nodeGenerator(currentNode, move)\r\n            if (JSON.stringify(nextNode.state) === JSON.stringify(lastState)) {} else {\r\n                stack.push(nextNode)\r\n            }\r\n        })\r\n    }\r\n    return false\r\n}\r\n\r\nfunction IDS(startingNode) {\r\n    let depth = 1\r\n    while (true){\r\n        console.log(`Checking depth ${depth}`)\r\n        let ans = limitedDepthFirstSearch(startingNode, depth)\r\n        if (ans === false){\r\n            depth++\r\n        } else {\r\n            let steps = [ans[ans.length - 1].state]\r\n            let lastDepths = [ans[ans.length - 1].depth]\r\n            for (let i=(ans.length - 1); i>=0; i--){\r\n                if(!lastDepths.includes(ans[i].depth)) {\r\n                    steps.push(ans[i].state)\r\n                    lastDepths.push(ans[i].depth)\r\n                }\r\n            }\r\n            steps.push(startingNode.state)\r\n            return {\r\n                foundOnDepth: depth,\r\n                steps: steps.reverse()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default IDS","const blockManhattan = (board, block) => {\r\n    const goalMapper = {\r\n        1: [0, 1],\r\n        2: [0, 2],\r\n        3: [1, 0],\r\n        4: [1, 1],\r\n        5: [1, 2],\r\n        6: [2, 0],\r\n        7: [2, 1],\r\n        8: [2, 2]\r\n    }\r\n    let distance = 0\r\n    if (board[0].includes(block)) {\r\n        distance += Math.abs(0 - goalMapper[block][0])\r\n        distance += Math.abs(board[0].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    else if (board[1].includes(block)) {\r\n        distance += Math.abs(1 - goalMapper[block][0])\r\n        distance += Math.abs(board[1].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    else {\r\n        distance += Math.abs(2 - goalMapper[block][0])\r\n        distance += Math.abs(board[2].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    return distance\r\n}\r\n\r\nconst manhattanDistance = (board) => {\r\n    let distance = 0\r\n    for (let i=1; i<9; i++){\r\n        distance += blockManhattan(board, i)\r\n    }\r\n    return distance\r\n}\r\n\r\nfunction getNodeFValue(board, depth) {\r\n    return (manhattanDistance(board) + depth - 1)\r\n}\r\n\r\nfunction getNumberPosition(state, number) {\r\n    if (state[0].includes(number)){\r\n        return [0, state[0].indexOf(number)]\r\n    } else if (state[1].includes(number)){\r\n        return [1, state[1].indexOf(number)]\r\n    } else {\r\n        return [2, state[2].indexOf(number)]\r\n    }\r\n}\r\n\r\nfunction availableMoves(state) {\r\n    let moveAbles = []\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(state, 0)\r\n\r\n    if (emptyPosition === 0 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[0][2],\r\n            state[1][1]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][2]\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[1][1],\r\n            state[2][0],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0],\r\n            state[1][2],\r\n            state[2][1],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][2],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[1][0],\r\n            state[2][1]\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[2][0],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else{\r\n        moveAbles = [\r\n            state[1][2],\r\n            state[2][1]\r\n        ]\r\n    }\r\n\r\n    return moveAbles\r\n}\r\n\r\nfunction goalTest(state) {\r\n    return JSON.stringify(state) === JSON.stringify([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\r\n}\r\n\r\nfunction nodeGenerator(node, number) {\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(node.state, 0)\r\n    let [numberPosition, numberIdx] = getNumberPosition(node.state, number)\r\n\r\n    let newState = JSON.parse(JSON.stringify(node.state))\r\n    newState[numberPosition][numberIdx] = 0\r\n    newState[emptyPosition][emptyIdx] = number\r\n\r\n    return {\r\n        state: newState,\r\n        depth: node.depth + 1,\r\n        parent: node,\r\n        f: getNodeFValue(newState, node.depth + 1)\r\n    }\r\n}\r\n\r\nfunction getBestNodeInStack(stack) {\r\n    let selectedNodeIndex = 0\r\n    let bestScore = stack[0].f\r\n    for (let i=0; i<stack.length; i++){\r\n        let currentScore = stack[i].f\r\n        if (currentScore < bestScore) {\r\n            bestScore = currentScore\r\n            selectedNodeIndex = i\r\n        }\r\n    }\r\n    return {nodeReturned:stack[selectedNodeIndex], indexReturned: selectedNodeIndex}\r\n}\r\n\r\nfunction AStar(startingNode) {\r\n    let stack = []\r\n    startingNode.f = getNodeFValue(startingNode.state, startingNode.depth)\r\n    stack.push(startingNode)\r\n    while (stack.length !== 0) {\r\n        let {nodeReturned, indexReturned} = getBestNodeInStack(stack)\r\n        let currentNode = nodeReturned\r\n        if (goalTest(currentNode.state)) {\r\n            return currentNode\r\n        }\r\n        stack.splice(indexReturned, 1)\r\n        availableMoves(currentNode.state).forEach(move => {\r\n            let nextNode = nodeGenerator(currentNode, move)\r\n            stack.push(nextNode)\r\n        })\r\n    }\r\n    return false\r\n}\r\n\r\nfunction AStarRunner(startingNode) {\r\n    let ans = AStar(startingNode)\r\n\r\n    if (!ans) {\r\n        alert(\"Something went wrong!\")\r\n    } else {\r\n        let answer = []\r\n        let cNode = ans\r\n        while (cNode !== null){\r\n            answer.push(cNode.state)\r\n            cNode = cNode.parent\r\n        }\r\n        return {\r\n            foundOnDepth: ans.depth,\r\n            steps: answer.reverse()\r\n        }\r\n    }\r\n}\r\n\r\nexport default AStarRunner","const blockManhattan = (board, block) => {\r\n    const goalMapper = {\r\n        1: [0, 1],\r\n        2: [0, 2],\r\n        3: [1, 0],\r\n        4: [1, 1],\r\n        5: [1, 2],\r\n        6: [2, 0],\r\n        7: [2, 1],\r\n        8: [2, 2]\r\n    }\r\n    let distance = 0\r\n    if (board[0].includes(block)) {\r\n        distance += Math.abs(0 - goalMapper[block][0])\r\n        distance += Math.abs(board[0].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    else if (board[1].includes(block)) {\r\n        distance += Math.abs(1 - goalMapper[block][0])\r\n        distance += Math.abs(board[1].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    else {\r\n        distance += Math.abs(2 - goalMapper[block][0])\r\n        distance += Math.abs(board[2].indexOf(block) - goalMapper[block][1])\r\n    }\r\n    return distance\r\n}\r\n\r\nconst manhattanDistance = (board) => {\r\n    let distance = 0\r\n    for (let i=1; i<9; i++){\r\n        distance += blockManhattan(board, i)\r\n    }\r\n    return distance\r\n}\r\n\r\nfunction getNumberPosition(state, number) {\r\n    if (state[0].includes(number)){\r\n        return [0, state[0].indexOf(number)]\r\n    } else if (state[1].includes(number)){\r\n        return [1, state[1].indexOf(number)]\r\n    } else {\r\n        return [2, state[2].indexOf(number)]\r\n    }\r\n}\r\n\r\nfunction availableMoves(state) {\r\n    let moveAbles = []\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(state, 0)\r\n\r\n    if (emptyPosition === 0 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[0][2],\r\n            state[1][1]\r\n        ]\r\n    } else if (emptyPosition === 0 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][2]\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[0][0],\r\n            state[1][1],\r\n            state[2][0],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[0][1],\r\n            state[1][0],\r\n            state[1][2],\r\n            state[2][1],\r\n        ]\r\n    } else if (emptyPosition === 1 && emptyIdx === 2){\r\n        moveAbles = [\r\n            state[0][2],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 0){\r\n        moveAbles = [\r\n            state[1][0],\r\n            state[2][1]\r\n        ]\r\n    } else if (emptyPosition === 2 && emptyIdx === 1){\r\n        moveAbles = [\r\n            state[2][0],\r\n            state[1][1],\r\n            state[2][2],\r\n        ]\r\n    } else{\r\n        moveAbles = [\r\n            state[1][2],\r\n            state[2][1]\r\n        ]\r\n    }\r\n\r\n    return moveAbles\r\n}\r\n\r\nfunction goalTest(state) {\r\n    return JSON.stringify(state) === JSON.stringify([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\r\n}\r\n\r\nfunction nodeGenerator(node, number) {\r\n    let [emptyPosition, emptyIdx] = getNumberPosition(node.state, 0)\r\n    let [numberPosition, numberIdx] = getNumberPosition(node.state, number)\r\n\r\n    let newState = JSON.parse(JSON.stringify(node.state))\r\n    newState[numberPosition][numberIdx] = 0\r\n    newState[emptyPosition][emptyIdx] = number\r\n\r\n    return {\r\n        state: newState,\r\n        depth: node.depth + 1,\r\n        parent: node,\r\n        f: manhattanDistance(newState)\r\n    }\r\n}\r\n\r\nfunction getBestNodeInStack(stack) {\r\n    let selectedNodeIndex = 0\r\n    let bestScore = stack[0].f\r\n    for (let i=0; i<stack.length; i++){\r\n        let currentScore = stack[i].f\r\n        if (currentScore < bestScore) {\r\n            bestScore = currentScore\r\n            selectedNodeIndex = i\r\n        }\r\n    }\r\n    return {nodeReturned:stack[selectedNodeIndex], indexReturned: selectedNodeIndex}\r\n}\r\n\r\nfunction GBFS(startingNode) {\r\n    let stack = []\r\n    startingNode.f = manhattanDistance(startingNode.state)\r\n    stack.push(startingNode)\r\n    while (stack.length !== 0) {\r\n        let {nodeReturned, indexReturned} = getBestNodeInStack(stack)\r\n        let currentNode = nodeReturned\r\n        if (goalTest(currentNode.state)) {\r\n            return currentNode\r\n        }\r\n        stack.splice(indexReturned, 1)\r\n        availableMoves(currentNode.state).forEach(move => {\r\n            let nextNode = nodeGenerator(currentNode, move)\r\n            stack.push(nextNode)\r\n        })\r\n    }\r\n    return false\r\n}\r\n\r\nfunction GreedyBFS(startingNode) {\r\n    let ans = GBFS(startingNode)\r\n\r\n    if (!ans) {\r\n        alert(\"Something went wrong!\")\r\n    } else {\r\n        let answer = []\r\n        let cNode = ans\r\n        while (cNode !== null){\r\n            answer.push(cNode.state)\r\n            cNode = cNode.parent\r\n        }\r\n        return {\r\n            foundOnDepth: ans.depth,\r\n            steps: answer.reverse()\r\n        }\r\n    }\r\n}\r\n\r\nexport default GreedyBFS","import {AiOutlineArrowDown} from \"react-icons/ai\";\r\n\r\nconst Result = ({ result, execTime, algorithm }) => {\r\n    return(\r\n        <div>\r\n            <div className={\"w-max mx-auto mt-5 text-5xl text-gray-700\"}>\r\n                Solved!\r\n            </div>\r\n            <div className={\"w-max mx-auto text-2xl text-gray-700 my-5 text-center\"}>\r\n                <div>\r\n                    Cost : {result.foundOnDepth - 1}\r\n                </div>\r\n                <div>\r\n                    Execution time : {execTime} milliseconds\r\n                </div>\r\n                <div>\r\n                    Solver algorithm : {algorithm}\r\n                </div>\r\n            </div>\r\n            <div className={\"w-max mx-auto\"}>\r\n                {\r\n                    result.steps.map((step, floor) => {\r\n                        return(\r\n                            <div\r\n                                key={floor}\r\n                            >\r\n                                <div\r\n                                    className={\"m-3 w-max bg-gray-200 p-5 grid grid-cols-3 gap-2 rounded-lg border-2 border-gray-400\"}>\r\n                                    {\r\n                                        step[0].map((block, idx) => {\r\n                                            if (block === 0){\r\n                                                return(\r\n                                                    <div key={`${0}-${idx}`}></div>\r\n                                                )\r\n                                            } else {\r\n                                                return(\r\n                                                    <div\r\n                                                        key={`${0}-${idx}`}\r\n                                                        className={\"shadow-lg rounded-lg p-5 bg-blue-500 text-center text-white\"}>\r\n                                                        {block}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        step[1].map((block, idx) => {\r\n                                            if (block === 0){\r\n                                                return(\r\n                                                    <div key={`${1}-${idx}`}></div>\r\n                                                )\r\n                                            } else {\r\n                                                return(\r\n                                                    <div\r\n                                                        key={`${1}-${idx}`}\r\n                                                        className={\"shadow-lg rounded-lg p-5 bg-blue-500 text-center text-white\"}>\r\n                                                        {block}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        step[2].map((block, idx) => {\r\n                                            if (block === 0){\r\n                                                return(\r\n                                                    <div key={`${2}-${idx}`}></div>\r\n                                                )\r\n                                            } else {\r\n                                                return(\r\n                                                    <div\r\n                                                        key={`${2}-${idx}`}\r\n                                                        className={\"shadow-lg rounded-lg p-5 bg-blue-500 text-center text-white\"}>\r\n                                                        {block}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                                {\r\n                                    floor === (result.foundOnDepth - 1) ?\r\n                                        null\r\n                                        :\r\n                                        <div className={\"w-max mx-auto text-gray-700\"}>\r\n                                            <AiOutlineArrowDown />\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result","import {useEffect, useState} from \"react\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\nimport IDS from '../algorithms/IDS'\r\nimport AStarRunner from '../algorithms/AStar'\r\nimport GreedyBFS from '../algorithms/GreedyBFS'\r\nimport Result from \"./Result\";\r\n\r\nconst Solver = ({ blocks, algorithm }) => {\r\n    const [result, setResult] = useState(false)\r\n    const [execTime, setExecTime] = useState(0)\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            let startDate = new Date();\r\n\r\n            if (algorithm === \"IDS\") {\r\n                let res = IDS({\r\n                    state: blocks,\r\n                    depth: 1\r\n                })\r\n\r\n                let endDate = new Date();\r\n                let timeTaken = endDate.getTime() - startDate.getTime();\r\n                setExecTime(timeTaken)\r\n\r\n                setResult(res)\r\n            }\r\n            else if (algorithm === \"AStar\") {\r\n                let res = AStarRunner({\r\n                    state: blocks,\r\n                    parent: null,\r\n                    depth: 1,\r\n                    f: null\r\n                })\r\n\r\n                let endDate = new Date();\r\n                let timeTaken = endDate.getTime() - startDate.getTime();\r\n                setExecTime(timeTaken)\r\n\r\n                setResult(res)\r\n            }\r\n            else {\r\n                let res = GreedyBFS({\r\n                    state: blocks,\r\n                    parent: null,\r\n                    depth: 1,\r\n                    f: null\r\n                })\r\n\r\n                let endDate = new Date();\r\n                let timeTaken = endDate.getTime() - startDate.getTime();\r\n                setExecTime(timeTaken)\r\n\r\n                setResult(res)\r\n            }\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [algorithm, blocks]);\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                result === false ?\r\n                    <div>\r\n                        <LoadingScreen/>\r\n                    </div>\r\n                    :\r\n                    <Result result={result} execTime={execTime} algorithm={algorithm}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Solver","import Board from \"./components/Board\";\nimport {useEffect, useState} from \"react\";\nimport QuickSet from \"./components/QuickSet\";\nimport RandomSet from \"./components/RandomSet\";\nimport Solver from \"./components/Solver\";\n\n\nfunction App() {\n    const [blocks, setBlocks] = useState([\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8]\n    ])\n    const [moveAbles, setMoveAbles] = useState([1, 3])\n    const [solved, setSolved] = useState(true)\n    const [setterMode, setSetterMode] = useState(1)\n    const [isSolving, setIsSolving] = useState(false)\n    const [algorithm, setAlgorithm] = useState(null)\n\n    /* Goal test */\n    useEffect(() => {\n        if(JSON.stringify(blocks) === JSON.stringify([[0, 1, 2], [3, 4, 5], [6, 7, 8]])){\n            if (!solved){\n                setSolved(true)\n            }\n        } else {\n            if (solved){\n                setSolved(false)\n            }\n        }\n    }, [blocks, solved])\n\n    const getSetterComponentByMode = () => {\n        switch (setterMode) {\n            case 1:\n                return <Board blocks={blocks} setBlocks={setBlocks} moveAbles={moveAbles} setMoveAbles={setMoveAbles} />\n            case 2:\n                return <RandomSet blocks={blocks} setBlocks={setBlocks} moveAbles={moveAbles} setMoveAbles={setMoveAbles} setSetterMode={setSetterMode} />\n            case 3:\n                return <QuickSet setBlocks={setBlocks} setMoveAbles={setMoveAbles} setSetterMode={setSetterMode} />\n            default:\n                return <div>Something went wrong please refresh the app</div>\n        }\n    }\n\n    const getSetterModeButtonsClass = (button) => {\n        if(button === setterMode){\n            return \"transition hover:bg-blue-800 py-2 px-5 bg-blue-500 text-center text-white rounded-xl shadow cursor-pointer\"\n        } else {\n            return \"transition hover:bg-gray-300 py-2 px-5 bg-gray-200 text-gray-500 border-2 border-gray-400 text-center rounded-xl shadow cursor-pointer\"\n        }\n    }\n\n    return (\n        <div>\n            {\n                isSolving ?\n                    null\n                    :\n                    <div>\n                        <div className={\"text-3xl text-center my-5 text-gray-600\"}>\n                            Set the puzzle\n                        </div>\n                        <div className={\"grid grid-cols-3 gap-4 w-max mx-auto my-5\"}>\n                            <div\n                                onClick={e => setSetterMode(1)}\n                                className={getSetterModeButtonsClass(1)}\n                            >Manual set</div>\n                            <div\n                                onClick={e => setSetterMode(2)}\n                                className={getSetterModeButtonsClass(2)}\n                            >Random set\n                            </div>\n                            <div\n                                onClick={e => setSetterMode(3)}\n                                className={getSetterModeButtonsClass(3)}\n                            >Quick set</div>\n                        </div>\n                        <div className={\"w-max mx-auto p-3\"}>\n                            {\n                                getSetterComponentByMode()\n                            }\n                        </div>\n                    </div>\n            }\n            {\n                isSolving ?\n                    <div>\n                        <Solver blocks={blocks} algorithm={algorithm} />\n                    </div>\n                    :\n                    (\n                        solved ?\n                            null\n                            :\n                            <div>\n                                <div className={'w-max mx-auto flex'}>\n                                    <div\n                                        onClick={e => {\n                                            setAlgorithm(\"IDS\")\n                                            setIsSolving(true)\n                                        }}\n                                        className={\"mx-2 w-max transition hover:bg-blue-800 py-2 px-5 bg-blue-500 text-center text-white rounded-xl shadow cursor-pointer\"}>\n                                        IDS\n                                    </div>\n                                    <div\n                                        onClick={e => {\n                                            setAlgorithm(\"AStar\")\n                                            setIsSolving(true)\n                                        }}\n                                        className={\"mx-2 w-max transition hover:bg-blue-800 py-2 px-5 bg-blue-500 text-center text-white rounded-xl shadow cursor-pointer\"}>\n                                        A*\n                                    </div>\n                                    <div\n                                        onClick={e => {\n                                            setAlgorithm(\"GreedyBFS\")\n                                            setIsSolving(true)\n                                        }}\n                                        className={\"mx-2 w-max transition hover:bg-blue-800 py-2 px-5 bg-blue-500 text-center text-white rounded-xl shadow cursor-pointer\"}>\n                                        Greedy BFS\n                                    </div>\n                                </div>\n                                <div className={\"text-center text-gray-700 mt-5\"}>\n                                    <div>You can watch the process flow by simply open your browser developer console <span className={\"font-bold\"}>\"BEFORE STARTING THE SOLVER\"</span></div>\n                                    <div>For Google chrome hold \"Option + ⌘ + J\" (on macOS), or \"Shift + CTRL + J\" (on Windows/Linux).</div>\n                                </div>\n                            </div>\n                    )\n            }\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}